// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatAppClient is the client API for ChatApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAppClient interface {
	Enter(ctx context.Context, in *Copy, opts ...grpc.CallOption) (*Copy, error)
	Send(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*Response, error)
	Receive(ctx context.Context, in *Copy, opts ...grpc.CallOption) (*Mess, error)
}

type chatAppClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAppClient(cc grpc.ClientConnInterface) ChatAppClient {
	return &chatAppClient{cc}
}

func (c *chatAppClient) Enter(ctx context.Context, in *Copy, opts ...grpc.CallOption) (*Copy, error) {
	out := new(Copy)
	err := c.cc.Invoke(ctx, "/proto.chatApp/enter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppClient) Send(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.chatApp/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppClient) Receive(ctx context.Context, in *Copy, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/proto.chatApp/receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAppServer is the server API for ChatApp service.
// All implementations must embed UnimplementedChatAppServer
// for forward compatibility
type ChatAppServer interface {
	Enter(context.Context, *Copy) (*Copy, error)
	Send(context.Context, *Mess) (*Response, error)
	Receive(context.Context, *Copy) (*Mess, error)
	mustEmbedUnimplementedChatAppServer()
}

// UnimplementedChatAppServer must be embedded to have forward compatible implementations.
type UnimplementedChatAppServer struct {
}

func (UnimplementedChatAppServer) Enter(context.Context, *Copy) (*Copy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedChatAppServer) Send(context.Context, *Mess) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedChatAppServer) Receive(context.Context, *Copy) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedChatAppServer) mustEmbedUnimplementedChatAppServer() {}

// UnsafeChatAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAppServer will
// result in compilation errors.
type UnsafeChatAppServer interface {
	mustEmbedUnimplementedChatAppServer()
}

func RegisterChatAppServer(s grpc.ServiceRegistrar, srv ChatAppServer) {
	s.RegisterService(&ChatApp_ServiceDesc, srv)
}

func _ChatApp_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Copy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatApp/enter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServer).Enter(ctx, req.(*Copy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApp_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatApp/send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServer).Send(ctx, req.(*Mess))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatApp_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Copy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chatApp/receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServer).Receive(ctx, req.(*Copy))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatApp_ServiceDesc is the grpc.ServiceDesc for ChatApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chatApp",
	HandlerType: (*ChatAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "enter",
			Handler:    _ChatApp_Enter_Handler,
		},
		{
			MethodName: "send",
			Handler:    _ChatApp_Send_Handler,
		},
		{
			MethodName: "receive",
			Handler:    _ChatApp_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}
